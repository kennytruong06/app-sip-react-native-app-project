plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'com.google.dagger.hilt.android'
//    id 'org.jetbrains.dokka'
    id 'maven-publish'
//    id 'io.gitlab.arturbosch.detekt'
    id 'kotlin-parcelize'
}

apply plugin: 'maven-publish'

android {
    namespace 'com.telnyx.webrtc.sdk.telnyx_rtc'
}

def getVersionName = { ->
    return "2.0.1"
}

def getArtifactId = { ->
    return "telnyx_rtc"
}

/*task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}*/

publishing {
    publications {
        bar(MavenPublication) {
            groupId 'com.telnyx.webrtc.sdk.telnyx_rtc'
            artifactId getArtifactId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar") {
                builtBy assemble
            }
//            artifact(sourceJar)
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "compile") }

                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }

                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}

android {
    compileSdk 35

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 34

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.txt'

        buildConfigField("String", "SDK_VERSION", "\"${getVersionName()}\"" ?: "1.0")
        buildConfigField "java.util.concurrent.atomic.AtomicBoolean", "IS_TESTING", "new java.util.concurrent.atomic.AtomicBoolean(false)"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            jniDebuggable true
        }
        debug {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            jniDebuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            if (name == "testDebugUnitTest" || name == "testReleaseUnitTest") {
                kover {
                    excludes = ["com\\.telnyx\\.webrtc\\.sdk\\.peer\\..*"]
                    //Can't mock native code, these methods will be tested via instrumentation instead.
                }
            }
        }
    }
    sourceSets {
        test.manifest.srcFile "src/main/AndroidManifest.xml"
    }
    lintOptions {
        abortOnError false
        absolutePaths false
    }
    buildFeatures {
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/LICENSE.md"
            excludes += "/META-INF/LICENSE-notice.md"
        }
    }
}

//dokkaHtml {
//    outputDirectory.set(file("../docs"))
//    dokkaSourceSets {
//        main {
//            includes.from("Module.md")
//        }
//    }
////}
//
//detekt {
//    buildUponDefaultConfig = true
//    allRules = false
//    config = files("$projectDir/config/detekt.yml")
//    baseline = file("$projectDir/config/baseline.xml")
//
//    reports {
//        html.enabled = true // observe findings in your browser with structure and code snippets
//        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
//        txt.enabled = true
//        // similar to the console output, contains issue signature to manually edit baseline files
//        sarif.enabled = true
//        // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
//    }
//}

//tasks.koverHtmlReport {
//    enabled = true                          // false to disable report generation
//    htmlReportDir.set(layout.buildDirectory.dir("my-reports/html-result"))
//}

//tasks.koverXmlReport {
//    enabled = true                          // false to disable report generation
//    xmlReportFile.set(layout.buildDirectory.file("my-reports/result.xml"))
//}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"

    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "com.google.android.material:material:1.11.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation "com.telnyx.webrtc.lib:library:1.0.1"

    implementation "com.google.code.gson:gson:2.10.1"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    implementation "org.java-websocket:Java-WebSocket:1.5.3"

    implementation "com.squareup.okhttp3:okhttp:4.11.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.11.0"

    implementation "io.ktor:ktor-client-okhttp:2.3.2"
    implementation "io.ktor:ktor-client-cio:2.3.2"
    implementation "io.ktor:ktor-serialization-gson:2.3.2"
    implementation "io.ktor:ktor-client-websockets:2.3.2"
    implementation "io.ktor:ktor-client-okhttp:2.3.2"
    implementation "androidx.lifecycle:lifecycle-process:2.7.0"
    testImplementation "io.ktor:ktor-client-mock:2.3.2"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:32.2.0")
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-messaging-ktx"

    // Timber
    implementation "com.jakewharton.timber:timber:4.7.1"

    //permissions
    implementation "com.karumi:dexter:6.2.3"

    implementation "com.google.dagger:hilt-android:2.48"
    kapt "com.google.dagger:hilt-compiler:2.48"

    //Testing:
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation('org.robolectric:robolectric:4.8.1') {
        exclude group: 'com.google.protobuf'
    }
    testImplementation "io.mockk:mockk:1.13.4"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.10.0"
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // jUnit 4
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.junit.vintage:junit-vintage-engine:5.8.2"
    testImplementation "androidx.test:core-ktx:1.4.0"

    // jUnit 5
    def jupiter_version = "5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter_version"

    def kotest_version = "5.4.1"
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    testImplementation "io.kotest:kotest-property-jvm:$kotest_version"
    androidTestImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    androidTestImplementation "io.kotest:kotest-property-jvm:$kotest_version"

    testImplementation "org.slf4j:slf4j-nop:1.7.36"

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.9.10'

    // Testing - Instrumentation
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    testImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.ext:truth:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.work:work-testing:2.7.1'
    androidTestImplementation "io.mockk:mockk-android:1.13.4"
    debugImplementation 'androidx.fragment:fragment-testing:1.5.2'
    debugImplementation 'androidx.test:core-ktx:1.6.1'

    testImplementation "org.mockito:mockito-inline:5.2.0"
    androidTestImplementation "org.mockito:mockito-android:4.8.0"

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    def lifecycle_version = "2.7.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
}
